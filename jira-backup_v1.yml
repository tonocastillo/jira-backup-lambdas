---
AWSTemplateFormatVersion: '2010-09-09'

Description: "Template to create the Jira backup lambda function"


Resources:
############# RULE LAMBDA 1 #############
  JiraScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Jira-Backup ScheduledRule created from CloudFormation
      ScheduleExpression: "rate(3 days)"
      State: "ENABLED"
      RoleArn: !GetAtt
        - "JiraBackupRole"
        - "Arn"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "JiraBackupInitiate"
              - "Arn"
          Id: JiraBackupInitiate_Target
  JiraScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref JiraBackupInitiate
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JiraScheduledRule.Arn
  JiraBackupRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName:
          "JiraBackup"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
        Policies:
          -
            PolicyName: "IAMPassRolePermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - iam:PassRole
                    - xray:PutTraceSegments
                    - sns:Publish
                  Resource: "*"
          -
            PolicyName: "CloudFormationPermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action: cloudformation:*
                  Resource: "*"
          -
            PolicyName: "LambdaPermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action: 
                    - logs:CreateLogGroup
                    - lambda:InvokeFunction
                  Resource:
                    - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
          -
            PolicyName: "S3Permissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                  - s3:*
                  Resource:
                    Fn::Join:
                      - ""
                      -
                        - "arn:aws:s3:::"
                        -
                          Ref: "JiraBucket"
                        - "/*"
          -
            PolicyName: "SQSSendMessagePermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - sqs:SendMessage
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource: 
                    !GetAtt JiraBackupQueue.Arn
          -
            PolicyName: "CloudwatchPermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action: 
                    - cloudwatch:*
                  Resource: "*"

############# BUCKET #############
  JiraBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: <INSERT_S3_BUCKET_HERE>
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: <ACCOUNT>.atlassian.net
          Protocol: https
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter45Days
            Status: 'Enabled'
            ExpirationInDays: 45
            Prefix: backups/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete

############# SQS Queue #############

  JiraBackupQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: jira-backup
      VisibilityTimeout: 900
      DelaySeconds: 0

############# DNS RECORDS #############

  JiraPrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: <PRIVATE_HOSTED_ZONE_ID>
      Name: <INSERT_S3_BUCKET_HERE>.
      Type: CNAME
      TTL: 30
      ResourceRecords: 
        - <INSERT_S3_BUCKET_HERE>.s3-website-us-east-1.amazonaws.com

  JiraPublicDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: <PUBLIC_HOSTED_ZONE_ID>
      Name: <INSERT_S3_BUCKET_HERE>.
      Type: CNAME
      TTL: 30
      ResourceRecords:
        - <INSERT_S3_BUCKET_HERE>.s3-website-us-east-1.amazonaws.com

############# ALARMS for Lambda  #############

  JiraBackupInitiateErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", [!Ref JiraBackupInitiate, "-", "Errors" ]]
      AlarmDescription: "JiraBackupInitiate Lambda Errors Alarm"
      AlarmActions:
        - !ImportValue <SNS_TOPIC_ARN>
      OKActions:
        - !ImportValue <SNS_TOPIC_ARN>
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref JiraBackupInitiate
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: "missing"

  JiraBackupDownloadErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", [!Ref JiraBackupDownload, "-", "Errors" ]]
      AlarmDescription: "JiraBackupDownload Lambda Errors Alarm"
      AlarmActions:
        - !ImportValue <SNS_TOPIC_ARN>
      OKActions:
        - !ImportValue <SNS_TOPIC_ARN>
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref JiraBackupDownload
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: "missing"

  JiraBackupInitiateInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", [!Ref JiraBackupInitiate, "-", "Invocations" ]]
      AlarmDescription: "JiraBackupInitiate Lambda Invocations Alarm"
      AlarmActions:
        - !ImportValue <SNS_TOPIC_ARN>
      OKActions:
        - !ImportValue <SNS_TOPIC_ARN>
      Namespace: "AWS/Lambda"
      MetricName: "Invocations"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref JiraBackupInitiate
      Statistic: "Sum"
      ComparisonOperator: "LessThanThreshold"
      Threshold: 1
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: "missing"

  JiraBackupDownloadInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", [!Ref JiraBackupDownload, "-", "Invocations" ]]
      AlarmDescription: "JiraBackupDownload Lambda Invocations Alarm"
      AlarmActions:
        - !ImportValue <SNS_TOPIC_ARN>
      OKActions:
        - !ImportValue <SNS_TOPIC_ARN>
      Namespace: "AWS/Lambda"
      MetricName: "Invocations"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref JiraBackupDownload
      Statistic: "Sum"
      ComparisonOperator: "LessThanThreshold"
      Threshold: 1
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: "missing"

############# LAMBDA 1 #############
############# This Lambda executes the Jira backup and sends the final backup file URL to the the jira-backup SQS queue so it gets picked up by the second lambda #############
  JiraBackupInitiate:
    DependsOn: JiraBackupQueue
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        "JiraBackupInitiate"
      Handler: index.main
      Role: !GetAtt JiraBackupRole.Arn
      Runtime: python3.7
      TracingConfig:
        Mode: Active
      Timeout: 900
      Layers: 
        - Fn::ImportValue: LambdaLayers-RequestsLayer
        - Fn::ImportValue: LambdaLayers-BotoLayer
      Code:
        ZipFile: !Sub | 
          import json,time,os,requests,boto,boto3
          from requests.auth import HTTPBasicAuth
          from boto.s3.key import Key
          from time import gmtime, strftime
          sqs = boto3.client('sqs')
          sqs_url = 'https://sqs.us-east-1.amazonaws.com/<ACCOUNT_ID>/jira-backup'
          class Jira:
              def __init__(self, config):
                  self.config = config
                  self.__auth = HTTPBasicAuth(self.config['JIRA_EMAIL'], self.config['API_TOKEN'])
                  self.URL_run_backup = 'https://{}/rest/backup/1/export/runbackup'.format(self.config['JIRA_HOST'])
                  self.URL_download = 'https://{}/plugins/servlet'.format(self.config['JIRA_HOST'])
                  self.backup_status = {}
                  self.wait = 30
              def create_backup(self):
                  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
                  print('-> Starting backup: {}'.format(self.config['INCLUDE_ATTACHMENTS']))
                  payload = {"cbAttachments": self.config['INCLUDE_ATTACHMENTS'], "exportToCloud": "true"}
                  headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}
                  backup = requests.post(self.URL_run_backup, data=json.dumps(payload), headers=headers, auth=self.__auth)
                  if backup.status_code != 200:
                      raise Exception(backup, backup.text)
                  else:
                      task_id = json.loads(backup.text)['taskId']
                      print('Backup started fine: taskId={}'.format(task_id))
                      URL_backup_progress = 'https://{jira_host}/rest/backup/1/export/getProgress?taskId={task_id}'.format(
                          jira_host=self.config['JIRA_HOST'], task_id=task_id)
                      time.sleep(self.wait)
                      while 'result' not in self.backup_status.keys():
                          self.backup_status = json.loads(requests.get(URL_backup_progress, auth=self.__auth).text)
                          msg = 'Current status: {status} {progress}; {description}'.format(
                              status=self.backup_status['status'],
                              progress=self.backup_status['progress'],
                              description=self.backup_status['description'])
                          print(msg)
                          time.sleep(self.wait)
                      return '{prefix}/{resultId}'.format(prefix=self.URL_download, resultId=self.backup_status['result'])
          configJSON = {
              "JIRA_HOST": "<ACCOUNT>.atlassian.net",
              "JIRA_EMAIL": "<ACCOUNT_EMAIL",
              "API_TOKEN": "<INSERT_YOUR_API_TOKEN_HERE",
              "INCLUDE_ATTACHMENTS": "true",
              "UPLOAD_TO_S3": {
                  "S3_BUCKET": "<INSERT_S3_BUCKET_HERE>"
              }
          }
          def main(event,context):
              print(event)
              jira = Jira(configJSON)
              backup_url = jira.create_backup()
              file_name = '{}.zip'.format(backup_url.split('/')[-1].replace('?fileId=', ''))
              print(backup_url)
              print(file_name)
              print("backup finished, message sent to SQS to trigger second lambda to stream file to S3")
              print(sqs.send_message(QueueUrl=sqs_url, MessageBody=backup_url))
  JiraBackupInitiateLogGroup:
    DependsOn: JiraBackupInitiate
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${JiraBackupInitiate}'
      RetentionInDays: 7

############# LAMBDA 2 #############
############# This lambda picks up the URL from the jira-backup SQS queue and streams it to S3 #############

  JiraBackupDownload:
    DependsOn: JiraBackupQueue
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        "JiraBackupDownload"
      Handler: index.lambda_handler
      Role: !GetAtt JiraBackupRole.Arn
      Runtime: python3.7
      TracingConfig:
        Mode: Active
      Timeout: 900
      Layers:
        - Fn::ImportValue: LambdaLayers-RequestsLayer
        - Fn::ImportValue: LambdaLayers-BotoLayer
      Code:
        ZipFile: !Sub |
          import boto3,requests,time
          from requests.auth import HTTPBasicAuth
          timestr = time.strftime("%Y%m%d-%H%M%S")
          sqs = boto3.client('sqs')
          sqs_url = 'https://sqs.us-east-1.amazonaws.com/<ACCOUNT_ID>/jira-backup'
          s3 = boto3.client('s3')
          def rcv_msg(sqs_url):    
              response = sqs.receive_message(QueueUrl=sqs_url)
          def s3_stream(data, bucket, key):
              boto3.client("s3").upload_fileobj(data, Bucket=bucket, Key=key)
          config = {
              "JIRA_HOST": "<ACCOUNT>.atlassian.net",
              "JIRA_EMAIL": "<ACCOUNT_EMAIL",
              "API_TOKEN": "<INSERT_YOUR_API_TOKEN_HERE",
              "INCLUDE_ATTACHMENTS": "true",
              "UPLOAD_TO_S3": {
                  "S3_BUCKET": "<INSERT_S3_BUCKET_HERE>"
              }
          }
          def lambda_handler(event,context):
              print(event)
              for record in event['Records']:
                  print ("Printing message attributes:")
                  backup_url=record["body"]
                  print(backup_url)
                  file_name = '{}.zip'.format(backup_url.split('/')[-1].replace('?fileId=', ''))
                  if 'https' in backup_url:
                      print("\nStarting backup streaming to s3...\n")
                      print("Backup URL:")
                      print(backup_url)
                      print("Backup file name:")
                      print(file_name)
                      r = requests.get(backup_url, stream=True, auth=HTTPBasicAuth(config['JIRA_EMAIL'], config['API_TOKEN']))
                      bucket = config['UPLOAD_TO_S3']['S3_BUCKET']
                      print(r)
                      print("streaming to S3 now..")
                      s3_filename = "JIRA-Backup-%s.zip" % timestr
                      key = "backups/%s" % s3_filename
                      print(s3_stream(r.raw, bucket, key))
                      print("Backup file %s uploaded to %s" % (s3_filename, config['UPLOAD_TO_S3']['S3_BUCKET']))
                  else:
                      print("Backup failed.")
                      print(backup_url)
                      print(record['messageAttributes'])
  JiraBackupDownloadEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt JiraBackupQueue.Arn
      FunctionName: !GetAtt JiraBackupDownload.Arn
  JiraBackupDownloadLogGroup:
    DependsOn: JiraBackupDownload
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${JiraBackupDownload}'
      RetentionInDays: 7